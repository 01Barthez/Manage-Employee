// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Employee {
  employee_id String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String @unique
  password    String
  profileImage String?
  
  otp      Otp?
  verified Boolean @default(false)

  post   String
  salary Int
  
  isComeAndBack Boolean @default(false)

  //each user can have one or many attendances
  attendances Attendance[]

  //each user can have one or many absences
  absences Absence[]

  role RoleUser @default(user)
}

model Attendance {
  attendance_id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relationship between the employee and his attendance 
  employee   Employee @relation(fields: [employeeID], references: [employee_id], onDelete: Cascade)
  employeeID String   @db.ObjectId

  date DateTime @default(now())

  startTime DateTime
  endTime   DateTime?
}

model Absence {
  absence_id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relationship between the employee and his attendance 
  employee   Employee @relation(fields: [employeeID], references: [employee_id], onDelete: Cascade)
  employeeID String   @db.ObjectId

  date         DateTime @default(now())
  absenceHours Int      @default(1)
}

model blacklist {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  token String

  createAt DateTime @default(now())
  expireAt DateTime 
}

type Otp {
  code      String
  expire_at DateTime
}

enum RoleUser {
  admin
  user
}
