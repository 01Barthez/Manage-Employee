// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//? Gestion des enregistrement et mises a jour des employee
model Employee {
  employee_id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String  @unique
  password     String
  profileImage String? @map("profile") // Lien de la photo de profile de l'employé

  otp      Otp? // Cote OTP de verification
  verified Boolean @default(false) // Savoir si un employee a fait validé son code OTP

  post   String // Post occupé dans l'organisation / l'entreprise
  salary Int // Salaire de l'employé

  isComeAndBack Boolean @default(false) @map("status") // Savoir si un employee a ete present

  attendances Attendance[] //each employee can have one or many attendances
  absences    Absence[] //each employee can have one or many absences
  bonus       Bonus[] // employee can have Bonus for his exceptional worked
  monthSalary PayRoll[] // Pour stocker toutes les infos a la fin du mois sur le salaire et les adjustement faites

  role RoleUser @default(User)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deletedAt DateTime? // Pour appliquer le deleted soft

  @@index([deletedAt])
  @@index([verified, deletedAt])
  @@index([employee_id, deletedAt])
  @@index([email, deletedAt])
  @@index([isComeAndBack, deletedAt])
}

//? Gestion des Presences des employee
model Attendance {
  attendance_id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relationship between the employee and his attendance 
  employee   Employee @relation(fields: [employeeID], references: [employee_id], onDelete: Cascade, onUpdate: Cascade)
  employeeID String   @db.ObjectId // ID de d'employee enregistré

  status AttendenceStatus @default(Present) // "Present" | "Retard" | "Absent" ...
  date   DateTime         @default(now()) @map("Date_day") @db.Date

  reason String? // Reason de l'abscence si nécessaire | ex: Maladie... Congée...

  startTime   DateTime // Heure du début des avtivité
  endTime     DateTime? // Heure de fin des avtivité
  hoursWorked Int? // nombre d'heure de travail par jour

  @@index([employeeID, date])
}

//? Gestion des Abscences des employee
model Absence {
  absence_id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relationship between the employee and his attendance 
  employee   Employee @relation(fields: [employeeID], references: [employee_id], onDelete: Cascade, onUpdate: Cascade)
  employeeID String   @db.ObjectId // id de l'employee a traité

  date         DateTime @default(now()) @map("Date_day") @db.Date
  absenceHours Int // Nombre d'heure d'abscence 

  @@index([employeeID, date])
}

model Bonus {
  bonus_id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relationship between the employee and his attendance 
  employee   Employee @relation(fields: [employeeID], references: [employee_id], onDelete: Cascade, onUpdate: Cascade)
  employeeID String   @db.ObjectId // id de l'employee a traité

  amount Int

  date DateTime @default(now()) @map("Date_day") @db.Date
}

model PayRoll {
  payroll_id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relationship between the employee and his attendance 
  employee   Employee @relation(fields: [employeeID], references: [employee_id], onDelete: Cascade, onUpdate: Cascade)
  employeeID String   @db.ObjectId // id de l'employee a traité

  baseSalary Int
  deduction  Int @default(0)
  bonuses    Int @default(0)
  totalPay   Int

  dateMonth DateTime @default(now()) @map("Date_mois") @db.Date
}

//? Gestion des tokens a mettre en liste noir
model Blacklist {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  token String @unique // Token a blacklisté

  createAt DateTime @default(now())
  expireAt DateTime

  @@index([token, expireAt])
  @@index([expireAt])
}

//? Gestion des parametres globaux de l'appli
model Setting {
  setting_id String     @id @default(auto()) @map("_id") @db.ObjectId
  key        KeySetting @unique
  value      String
  updatedAt  DateTime   @updatedAt
}

//? Gestion des parametres globaux des notifs
model TemplateEmail {
  template_id String      @id @default(auto()) @map("_id") @db.ObjectId
  key         KeyTemplate
  value       String
}

enum KeyTemplate {
  logo
  facebookLink
  linkedinLink
  githubLink
  privacyTerms
  urlWebsite
  backGroundImage
}

//? Pour l'OTP
type Otp {
  code      String
  expire_at DateTime
}

enum KeySetting {
  max_begin_hours
  max_end_hours
  hours_of_works
  days_of_works
  salary_round_factor
  min_salary
  min_valid_salary
  max_valid_salary
  hollydays
}

//? Different status de presence d'un employee
enum AttendenceStatus {
  Present
  Retard
  Absent
}

//? Differents role d'un utilisateur
enum RoleUser {
  Admin
  Manager
  User
}
